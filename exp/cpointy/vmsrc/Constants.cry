enum OpCodes
{
	ADD_LITERAL, // 1: type, 2: value (0 or 1 for false/true or an integer. String values are in the string arg. Float values are as well, and are parsed.)
	ADD_NAME, // name is string arg. ID is the order in which this was encountered.
	ASSIGN_FUNCTION_ARG, // 1: scope ID, 2: function arg value index to assign to variable
	ASSIGN_FUNCTION_ARG_AND_JUMP, // 1: scope ID, 2: function arg value index to assign to variable, 3: PC offset to jump if arg is present (otherwise don't assign and keep going)
	ASSIGN_INDEX, // 1: 0 or 1 for whether to push the assigned value back on the stack when done. value stack: [root, index, value]
	ASSIGN_STEP, // name ID of step. value stack: [root, value]
	ASSIGN_THIS_STEP, // name ID of step. value stack: [value]
	ASSIGN_VAR, // 1: local scope ID
	BINARY_OP,
	BOOLEAN_NOT, // no args.
	BREAK, // no ops. This should be resolved into a jump before actually being run.
	BUILD_SWITCH_INT, // 2n args: (1: integer key, 2: offset value) <- repeat, the order that these appear indicates the switch ID
	BUILD_SWITCH_STRING, // 1: switch ID, 2: offset, string arg: value
	CALL_BASE_CONSTRUCTOR, // 1: num args passed
	CALL_CONSTRUCTOR, // 1: arg count, 2: class name ID, 3: output used | special cache 1: Class ID
	CALL_FUNCTION, // 1: num args passed, 2: 1|0 is value used?
	CALL_FRAMEWORK_FUNCTION, // 1: function ID (not identifier ID). Since these are defined by the framework, function count is verified at compile time and popped accordingly at runtime by the op itself, 2: 1|0 is output used?, 3: arg count
	CALL_FUNCTION_ON_GLOBAL, // 1: global scope ID, 2: num args passed, 3: 1|0 is value used?
	CLASS_DEFINITION, // Super complicated. See documentation in OO_readme.txt.
	CONTINUE, // no ops. This should be resolved into a jump before actually being run.
	DEF_ORIGINAL_CODE, // 1: file ID, string arg: source code of that file with a preceding line for the file name.
	DEF_DICTIONARY, // 1: size
	DEF_LIST, // 1: size
	DEREF_DOT, // 1: step ID
	DEREF_DOT_ON_BASE, // 1: step ID
	DUPLICATE_STACK_TOP, // 1: how many stack items should be duplicated?. get the top n of the stack, and just duplicate it
	FINALIZE_INITIALIZATION, // no ops. This indicates that builder data (e.g. List<Value> literalTableBuilder) should be converted into final static data (Value[] literalTable).
	FUNCTION_DEFINITION, // 1: function name ID, 2: PC offset where first line of function is, 3: total number of args; check to make sure not exceeded
	INDEX,
	INITIALIZE_GAMEPAD,
	ITERATION_STEP, // stack is in the following state: [index, local scope ID, list]. If the index exceeds the length of the list, the loop stops and jumps over the body of the loop, which is arg 1.
	JUMP,
	JUMP_IF_FALSE,
	JUMP_IF_FALSE_NO_POP,
	JUMP_IF_TRUE,
	JUMP_IF_TRUE_NO_POP,
	LIST_SLICE, // 1: begin slice index is present, 2: end slice index is present, 3: step is present
	LITERAL, // 1: literal ID in the literal table
	LITERAL_STREAM, // repeated version of the LITERAL op. Literals are listed in reverse order.
	NEGATIVE_SIGN, // no args. pop, flip, push.
	POP, // no args. pop value from value stack.
	POP_IF_NULL_OR_JUMP, // if the last item on the value stack is null, pop it. If it isn't, then jump. 1: jump distance.
	RETURN,
	RETURN_NULL,
	SPRITE_SHEET_BUILDER, // See SpriteSheetBuilder.GenerateManifestAndProduceSheetNameIdMapping() for documentation.
	STACK_INSERTION_FOR_INCREMENT, // duplicates the top element of the stack but pushes it 3 spots back. [..., a, b, c] --> [..., c, a, b, c]
	STACK_SWAP_POP, // swaps the last 2 items on the stack and then pops the (new) last one.
	SWITCH_INT, // 1: integer switch ID, 2: offset for default case
	SWITCH_STRING, // 1: string switch ID, 2: offset for default case
	THIS, // pushes the current object context onto the stack.
	TOKEN_DATA, // 1: PC of where this token data applies (you must add the value of USER_CODE_START at runtime), 2: line, 3: col, 4: file ID
	USER_CODE_START, // 1: PC of where the user-compiled code begins. PC in token information will add this number.
	VARIABLE, // 1: name id, 2: local scope ID, [optional] 3: global scope ID
	VARIABLE_GLOBAL, // 1: name id, 2: global scope ID
	VERIFY_TYPE_IS_ITERABLE, // verifies the last item on the stack is a list
}


// Needs to be in sync with BinaryOps.cs
enum BinaryOps
{
	ADDITION = 0,
	SUBTRACTION = 1,
	MULTIPLICATION = 2,
	DIVISION = 3,
	MODULO = 4,
	EXPONENT = 5,
	BITWISE_AND = 6,
	BITWISE_OR = 7,
	BITWISE_XOR = 8,
	BIT_SHIFT_LEFT = 9,
	BIT_SHIFT_RIGHT = 10,
	EQUALS = 12,
	NOT_EQUALS = 13,
	LESS_THAN = 14,
	LESS_THAN_OR_EQUAL = 15,
	GREATER_THAN = 16,
	GREATER_THAN_OR_EQUAL = 17,
}

const MAX_OP = BinaryOps.GREATER_THAN_OR_EQUAL + 1;

enum NativeObjectTypes {
	SCREEN = %%%TYPE_NATIVE_OBJECT_SCREEN%%%,
	IMAGE = %%%TYPE_NATIVE_OBJECT_IMAGE%%%,
}

enum Types {
	NULL = %%%TYPE_ID_NULL%%%,
	BOOLEAN = %%%TYPE_ID_BOOLEAN%%%,
	INTEGER = %%%TYPE_ID_INTEGER%%%,
	FLOAT = %%%TYPE_ID_FLOAT%%%,
	STRING = %%%TYPE_ID_STRING%%%,
	LIST = %%%TYPE_ID_LIST%%%,
	DICTIONARY = %%%TYPE_ID_DICTIONARY%%%,
	INSTANCE = %%%TYPE_ID_INSTANCE%%%,
	FUNCTION = %%%TYPE_ID_FUNCTION%%%,
	METHOD = %%%TYPE_ID_METHOD%%%,
	SYS_METHOD = %%%TYPE_ID_SYS_METHOD%%%,
	NATIVE_OBJECT = %%%TYPE_ID_NATIVE_OBJECT%%%,
}
const MAX_TYPE = Types.NATIVE_OBJECT + 1;

enum NativeObjectSubType {
	EVENT = %%%SUBTYPE_ID_EVENT%%%,
	GAMEPAD_DEVICE = %%%SUBTYPE_ID_GAMEPAD_DEVICE%%%,
	HTTP_REQUEST = %%%SUBTYPE_ID_HTTP_REQUEST%%%,
	IMAGE = %%%SUBTYPE_ID_IMAGE%%%,
	IMAGE_LOADER = %%%SUBTYPE_ID_IMAGE_LOADER%%%,
	SOUND = %%%SUBTYPE_ID_SOUND%%%,
	MUSIC = %%%SUBTYPE_ID_MUSIC%%%,
	TEXT_LOADER = %%%SUBTYPE_ID_TEXT_LOADER%%%,
}
const MAX_SUBTYPE = NativeObjectSubType.TEXT_LOADER + 1;

enum AsyncMessageType {
	HTTP_RESPONSE = %%%ASYNC_MESSAGE_TYPE_HTTP_RESPONSE%%%,
}

const INTEGER_POSITIVE_CACHE = 1000;
const INTEGER_NEGATIVE_CACHE = 100;

const IMAGE_SHEET_TILES_LOADED_PER_FRAME = 3;
const IMAGE_SHEET_STATUS_NOT_LOADED = 0;
const IMAGE_SHEET_STATUS_LOADING = 1;
const IMAGE_SHEET_STATUS_LOADED = 2;

// There is a to string method in IOManager.cry
// This enum is duplciated in IOErrors.cs
enum IOErrors {
	NONE = %%%IO_ERROR_NONE%%%,
	INVALID_PATH = %%%IO_ERROR_INVALID_PATH%%%,
	PATH_STEPS_ABOVE_DOMAIN = %%%IO_ERROR_PATH_STEPS_ABOVE_DOMAIN%%%, // e.g. C:\..\foo.txt or %APPDATA%\..\foo.txt in userdata-only context
	DOES_NOT_EXIST = %%%IO_ERROR_DOES_NOT_EXIST%%%,
	BAD_CASING = %%%IO_ERROR_BAD_CASING%%%,
	NONEXISTENT_DRIVE = %%%IO_ERROR_NONEXISTENT_DRIVE%%%,
	IMPOSSIBLE_STATE = %%%IO_ERROR_IMPOSSIBLE_STATE%%%,
	READ_ONLY = %%%IO_ERROR_READ_ONLY%%%,
	DISK_FULL = %%%IO_ERROR_DISK_FULL%%%,
	RESERVED_NAME = %%%IO_ERROR_RESERVED_NAME%%%,
	PATH_TOO_LONG = %%%IO_ERROR_PATH_TOO_LONG%%%,
	CANNOT_DELETE_DIRECTORY = %%%IO_ERROR_CANNOT_DELETE_DIRECTORY%%%,
	UNKNOWN_ERROR = %%%IO_ERROR_UNKNOWN_ERROR%%%,
}

enum OpenGlAction {
	DRAW_RECTANGLE = 1,
	DRAW_ELLIPSE = 2,
	DRAW_IMAGE = 3,
	DRAW_LINE = 4,
	DRAW_TRIANGLE = 5,
}

enum OpenGlMode {
	QUADS = 1,
}

enum SoundEventType {
	FADE_MUSIC = 1,
	PLAY_MUSIC = 2,
	PAUSE_MUSIC = 3,
	RESUME_MUSIC = 4,
	PLAY_SOUND = 5,
}
