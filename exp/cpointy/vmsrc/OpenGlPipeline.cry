
function @type('bool') glRenderNew(
	@type('object') glRaw,
	@type('int') VW, // virtual width
	@type('int') VH, // virtual height
	@type('int') RW, // real width
	@type('int') RH // real height
) {
	if (%%%IS_OPEN_GL_NEW_STYLE%%%) {

		// Oh dear. Will have to cast this conditionally per platform. How sad.
		@type('javax.microedition.khronos.opengles.GL10') gl = $_cast('javax.microedition.khronos.opengles.GL10', glRaw);
		@type('java.nio.FloatBuffer') vertexBuffer = $_gl_get_quad_vbo(gl);
		@type('java.nio.FloatBuffer') textureBuffer = $_gl_get_quad_texture_vbo(gl);

		@type('bool') scaled = VW != RW || VH != RH;

		@type('int') i = 0;
		@type('Image') image = null;
		@type('CompositeImage') compositeImage = null;
		@type('int') image_i = 0;
		@type('int') length = GL_VIRTUAL_SIZE;
	
		@type('int') red = 0;
		@type('int') green = 0;
		@type('int') blue = 0;
		@type('int') alpha = 0;

		@type('int') textureId = 0;
	
		@type('int') targetLeft = 0;
		@type('int') targetTop = 0;
		@type('int') targetRight = 0;
		@type('int') targetBottom = 0;
		@type('int') targetWidth = 0;
		@type('int') targetHeight = 0;
		@type('int') sourceLeft = 0;
		@type('int') sourceTop = 0;
		@type('int') sourceWidth = 0;
		@type('int') sourceHeight = 0;
	
		@type('double') textureWidth = 0.0;
		@type('double') textureHeight = 0.0;
		@type('double') textureLeft = 0.0;
		@type('double') textureRight = 0.0;
		@type('double') textureTop = 0.0;
		@type('double') textureBottom = 0.0;

		@type('float') newXFloat = 0;
		@type('float') newYFloat = 0;
		@type('float') newWidthFloat = 0;
		@type('float') newHeightFloat = 0;
		@type('float') twoFloat = 2;

		while (i < length) {
			switch ($_array_get(GL_DATA, i)) {
				case OpenGlAction.DRAW_IMAGE:

					targetLeft = $_array_get(GL_DATA, i | 1);
					targetTop = $_array_get(GL_DATA, i | 2);
					targetWidth = $_array_get(GL_DATA, i | 3);
					targetHeight = $_array_get(GL_DATA, i | 4);
					sourceLeft = $_array_get(GL_DATA, i | 5);
					sourceTop = $_array_get(GL_DATA, i | 6);
					sourceWidth = $_array_get(GL_DATA, i | 7);
					sourceHeight = $_array_get(GL_DATA, i | 8);
				
					image = $_array_get(GL_IMAGES, image_i);
					$_array_set(GL_IMAGES, image_i, null); // prevent memory leaks
					image_i += 1;

					textureWidth = Image$image.textureRight - Image$image.textureLeft;
					textureHeight = Image$image.textureBottom - Image$image.textureTop;

					textureLeft = Image$image.textureLeft + $_unsafe_integer_division(textureWidth * sourceLeft, Image$image.sourceWidth);
					textureTop = Image$image.textureTop + $_unsafe_integer_division(textureHeight * sourceTop, Image$image.sourceHeight);
					textureRight = textureLeft + $_unsafe_integer_division(textureWidth * sourceWidth, Image$image.sourceWidth);
					textureBottom = textureTop + $_unsafe_integer_division(textureHeight * sourceHeight, Image$image.sourceHeight);

					compositeImage = Image$image.compositeResource;
					if (!CompositeImage$compositeImage.loaded) {
						// For historical reference, GL.End() was required here if a mode was ongoing, before loading an image.
						CompositeImage$compositeImage.glTextureId = $_gl_load_texture(gl, CompositeImage$compositeImage.nativeBitmap);
						CompositeImage$compositeImage.loaded = true;
					}
					textureId = CompositeImage$compositeImage.glTextureId;

					// bind texture
					$_gl_bind_texture(gl, textureId);

					newXFloat = $_unsafe_float_division(twoFloat * targetLeft, VW) - 1;
					newYFloat = 1 - $_unsafe_float_division(twoFloat * targetTop, VH);
					newWidthFloat = $_unsafe_float_division(twoFloat * targetWidth, VW);
					newHeightFloat = $_unsafe_float_division(twoFloat * targetHeight, -VH);

					$_gl_load_identity(gl);
					$_gl_translate(gl, newXFloat, newYFloat);
					$_gl_scale(gl, newWidthFloat, newHeightFloat);

					// use vertex arrays
					$_gl_enable_vertex_array(gl); // gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
					$_gl_enable_texture_coord_array(gl); // gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

					$_gl_color_4(gl, 255, 255, 255, 255);

					$_gl_bind_texture(gl, textureId);

					// Vertex buffers
					$_gl_vertex_pointer(gl, vertexBuffer); // gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
					$_gl_tex_coord_pointer(gl, textureBuffer); // gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, textureBuffer);

					// Draw triangle strip
					$_gl_draw_arrays(gl, 4); // gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length / 3);

					// Clean up
					$_gl_disable_vertex_array(gl); // gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
					$_gl_disable_tex_coord_array(gl); // gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

					break;

				case OpenGlAction.DRAW_RECTANGLE:
				
					targetLeft = $_array_get(GL_DATA, i | 1);
					targetTop = $_array_get(GL_DATA, i | 2);
					targetWidth = $_array_get(GL_DATA, i | 3);
					targetHeight = $_array_get(GL_DATA, i | 4);
					//targetRight = targetWidth + targetLeft;
					//targetBottom = targetHeight + targetTop;

					red = $_array_get(GL_DATA, i | 5);
					green = $_array_get(GL_DATA, i | 6);
					blue = $_array_get(GL_DATA, i | 7);
					alpha = $_array_get(GL_DATA, i | 8);
				
					newXFloat = $_unsafe_float_division(twoFloat * targetLeft, VW) - 1;
					newYFloat = 1 - $_unsafe_float_division(twoFloat * targetTop, VH);
					newWidthFloat = $_unsafe_float_division(twoFloat * targetWidth, VW);
					newHeightFloat = $_unsafe_float_division(twoFloat * targetHeight, -VH);

					$_gl_load_identity(gl);
					$_gl_translate(gl, newXFloat, newYFloat);
					$_gl_scale(gl, newWidthFloat, newHeightFloat);
					$_gl_enable_vertex_array(gl);
					$_gl_color_4(gl, red, green, blue, alpha);

					$_gl_vertex_pointer(gl, vertexBuffer);
				
					$_gl_draw_arrays(gl, 4);

					$_gl_disable_vertex_array(gl); 
				
					break;

				case OpenGlAction.DRAW_ELLIPSE:
					break;

				case OpenGlAction.DRAW_LINE:

					break;
			}
			i += 16;
		}
	}
	return true;
}

function @type('bool') glRender(
	@type('object') gl,
	@type('int') VW, // virtual width
	@type('int') VH, // virtual height
	@type('int') RW, // real width
	@type('int') RH // real height
) {
	if (%%%IS_OPEN_GL_NEW_STYLE%%%) {
		glRenderNew(gl, VW, VH, RW, RH);
	} else {
		glRenderOld(gl, VW, VH, RW, RH);
	}
	return true;
}

function @type('bool') glRenderOld(
	@type('object') gl,
	@type('int') VW, // virtual width
	@type('int') VH, // virtual height
	@type('int') RW, // real width
	@type('int') RH // real height
) {
	if (!%%%IS_OPEN_GL_NEW_STYLE%%%) {
		@type('bool') scaled = VW != RW || VH != RH;

		@type('int') i = 0;
		@type('int') image_i = 0;
		@type('int') length = GL_VIRTUAL_SIZE;

		@type('int') width = 0;
		@type('int') height = 0;
		@type('int') left = 0;
		@type('int') right = 0;
		@type('int') top = 0;
		@type('int') bottom = 0;

		@type('int') lineWidth = 0;
		@type('int') j = 0;
		@type('int') ptCount = 0;

		@type('int') startX = 0;
		@type('int') startY = 0;
		@type('int') endX = 0;
		@type('int') endY = 0;

		@type('double') textureWidth = 0.0;
		@type('double') textureHeight = 0.0;
		@type('double') textureLeft = 0.0;
		@type('double') textureRight = 0.0;
		@type('double') textureTop = 0.0;
		@type('double') textureBottom = 0.0;

		@type('double') slope = 0.0;
		@type('double') slopeScalingCoefficient = 0.0;
		@type('double') offsetXComp = 0.0;
		@type('double') offsetYComp = 0.0;
		@type('double') ax = 0.0;
		@type('double') ay = 0.0;
		@type('double') bx = 0.0;
		@type('double') by = 0.0;
		@type('double') cx = 0.0;
		@type('double') cy = 0.0;
		@type('double') dx = 0.0;
		@type('double') dy = 0.0;

		if (%%%IS_OPEN_GL_NEW_STYLE%%%) {
			@type('float') newXFloat = 0;
			@type('float') newYFloat = 0;
			@type('float') newWidthFloat = 0;
			@type('float') newHeightFloat = 0;
			@type('float') twoF = 2;
		}

		@type('int') red = 0;
		@type('int') green = 0;
		@type('int') blue = 0;
		@type('int') alpha = 0;
		@type('int') textureId = -1;

		@type('Image') image = null;
		@type('CompositeImage') compositeImage = null;
		@type('GlRenderState') state = null;
		@type('Array<int>') textureArray = $_new_array('int', 1);

		//$_gl_prepare_draw_pipeline(gl);

		while (i < length) {
			switch ($_array_get(GL_DATA, i)) {
				case OpenGlAction.DRAW_RECTANGLE:
					left = $_array_get(GL_DATA, i | 1);
					top = $_array_get(GL_DATA, i | 2);
					right = $_array_get(GL_DATA, i | 3) + left;
					bottom = $_array_get(GL_DATA, i | 4) + top;
					red = $_array_get(GL_DATA, i | 5);
					green = $_array_get(GL_DATA, i | 6);
					blue = $_array_get(GL_DATA, i | 7);
					alpha = $_array_get(GL_DATA, i | 8);
				
					if (right >= 0 && left < VW && bottom > 0 && top < VH) {
						if (state == null ||
							GlRenderState$state.mode != OpenGlMode.QUADS ||
							GlRenderState$state.textureId != 0 ||
							GlRenderState$state.r != red ||
							GlRenderState$state.g != green ||
							GlRenderState$state.b != blue ||
							GlRenderState$state.a != alpha) {
							if (state == null) {
								state = new GlRenderState(0, 0, 0, 0, 0, 0);
							} else if (!%%%IS_OPEN_GL_NEW_STYLE%%%) {
								$_gl_end(gl);
							}

							GlRenderState$state.mode = OpenGlMode.QUADS;
							GlRenderState$state.textureId = 0;
							GlRenderState$state.r = red;
							GlRenderState$state.g = green;
							GlRenderState$state.b = blue;
							GlRenderState$state.a = alpha;

							$_gl_disable_texture_2d(gl);
							$_gl_color_4(gl, red, green, blue, alpha);
							$_gl_begin_quads(gl);
						
						}
					
						if (scaled) {
							$_gl_vertex_2(gl, $_unsafe_integer_division(left * RW, VW), $_unsafe_integer_division(top * RH, VH));
							$_gl_vertex_2(gl, $_unsafe_integer_division(right * RW, VW), $_unsafe_integer_division(top * RH, VH));
							$_gl_vertex_2(gl, $_unsafe_integer_division(right * RW, VW), $_unsafe_integer_division(bottom * RH, VH));
							$_gl_vertex_2(gl, $_unsafe_integer_division(left * RW, VW), $_unsafe_integer_division(bottom * RH, VH));
						} else {
							$_gl_vertex_2(gl, left, top);
							$_gl_vertex_2(gl, right, top);
							$_gl_vertex_2(gl, right, bottom);
							$_gl_vertex_2(gl, left, bottom);
						}
					}
					break;

				case OpenGlAction.DRAW_TRIANGLE:
					ax = $_array_get(GL_DATA, i | 1);
					ay = $_array_get(GL_DATA, i | 2);
					bx = $_array_get(GL_DATA, i | 3);
					by= $_array_get(GL_DATA, i | 4);
					cx = $_array_get(GL_DATA, i | 5);
					cy= $_array_get(GL_DATA, i | 6);
					red = $_array_get(GL_DATA, i | 7);
					green = $_array_get(GL_DATA, i | 8);
					blue = $_array_get(GL_DATA, i | 9);
					alpha = $_array_get(GL_DATA, i | 10);
					
					// Polygons require GL.end() so clear the state.
					// This should use a regular triangle but since all this is to be overhauled later anyway,
					// this is easier and quicker. Will fix if there's any pressing performance demand.
					if (state != null) {
						$_gl_end(gl);
						state = null;
					}
					
					$_gl_disable_texture_2d(gl);
					$_gl_color_4(gl, red, green, blue, alpha);
					$_gl_begin_polygon(gl);

					ptCount = $_unsafe_integer_division(width + height, 8);
					if (ptCount < 16) ptCount = 16;
					
					if (scaled) {
						$_gl_vertex_2(gl, $_unsafe_integer_division(ax * RW, VW), $_unsafe_integer_division(ay * RH, VH));
						$_gl_vertex_2(gl, $_unsafe_integer_division(bx * RW, VW), $_unsafe_integer_division(by * RH, VH));
						$_gl_vertex_2(gl, $_unsafe_integer_division(cx * RW, VW), $_unsafe_integer_division(cy * RH, VH));
					} else {
						$_gl_vertex_2(gl, ax, ay);
						$_gl_vertex_2(gl, bx, by);
						$_gl_vertex_2(gl, cx, cy);
					}
					$_gl_end(gl);
					break;

				case OpenGlAction.DRAW_ELLIPSE:
				
					left = $_array_get(GL_DATA, i | 1);
					top = $_array_get(GL_DATA, i | 2);
					right = $_array_get(GL_DATA, i | 3) + left;
					bottom = $_array_get(GL_DATA, i | 4) + top;
					red = $_array_get(GL_DATA, i | 5);
					green = $_array_get(GL_DATA, i | 6);
					blue = $_array_get(GL_DATA, i | 7);
					alpha = $_array_get(GL_DATA, i | 8);

					width = right - left;
					height = bottom - top;
					startX = left + $_unsafe_integer_division(width, 2);
					startY = top + $_unsafe_integer_division(height, 2);
					width = $_unsafe_integer_division(width, 2);
					height = $_unsafe_integer_division(height, 2);

					if (right >= 0 && left < VW && bottom >= 0 && top < VH && width > 0 && height > 0) {
						// Since Polygons require a GL.End(), clear the state if one exists and don't set a new one.
						if (state != null) {
							$_gl_end(gl);
							state = null;
						}
						
						$_gl_disable_texture_2d(gl);
						$_gl_color_4(gl, red, green, blue, alpha);
						$_gl_begin_polygon(gl);

						ptCount = $_unsafe_integer_division(width + height, 8);
						if (ptCount < 16) ptCount = 16;

						for (j = 0; j < ptCount; j += 1) {
							endX = $_cast('int', $_cos($_unsafe_float_division(-3.14159265358979 * 2 * j, ptCount)) * width + startX);
							endY = $_cast('int', $_sin($_unsafe_float_division(-3.14159265358979 * 2 * j, ptCount)) * height + startY);
							if (scaled) {
								$_gl_vertex_2(gl, $_unsafe_integer_division(endX * RW, VW), $_unsafe_integer_division(endY * RH, VH));
							} else {
								$_gl_vertex_2(gl, endX, endY);
							}
						}
						$_gl_end(gl);
					}
					break;

				case OpenGlAction.DRAW_LINE:
				
					// Horizontal and vertical lines were diverted to the rectangle drawing codepath before this point.
					// The slope will NEVER be 0.
					startX = $_array_get(GL_DATA, i | 1);
					startY = $_array_get(GL_DATA, i | 2);
					endX = $_array_get(GL_DATA, i | 3);
					endY = $_array_get(GL_DATA, i | 4);
					lineWidth = $_array_get(GL_DATA, i | 5);
					red = $_array_get(GL_DATA, i | 6);
					green = $_array_get(GL_DATA, i | 7);
					blue = $_array_get(GL_DATA, i | 8);
					alpha = $_array_get(GL_DATA, i | 9);

					left = startX;
					right = startX;
					if (startX > endX) left = endX;
					else right = endX;

					top = startY;
					bottom = startY;
					if (startY > endY) top = endY;
					else bottom = endY;

					// canonicalize coordinates such that the line is drawn to the right.
					if (startX > endX) {
						// j is a swap variable
						j = startX;
						startX = endX;
						endX = j;
						j = startY;
						startY = endY;
						endY = j;
					}

					slope = -$_unsafe_float_division(1.0 * endY - startY, (endX - startX));
					textureRight = slope; // hijacking textureRight as abs(slope)
					if (textureRight < 0) textureRight = -textureRight;

					slopeScalingCoefficient = $_exponent(1 + $_unsafe_float_division(1.0, (slope * slope)), 0.5);

					offsetXComp = $_unsafe_float_division($_unsafe_float_division(lineWidth, slopeScalingCoefficient), 2);
					offsetYComp = $_unsafe_float_division(lineWidth, (2 * textureRight * slopeScalingCoefficient));

					ax = startX;
					ay = startY;
					bx = endX;
					by = endY;
					cx = bx;
					cy = by;
					dx = ax;
					dy = ay;

					if (slope > 0) {
						ax -= offsetXComp;
						ay -= offsetYComp;
						bx -= offsetXComp;
						by -= offsetYComp;
						cx += offsetXComp;
						cy += offsetYComp;
						dx += offsetXComp;
						dy += offsetYComp;
					} else {
						ax += offsetXComp;
						ay -= offsetYComp;
						bx += offsetXComp;
						by -= offsetYComp;
						cx -= offsetXComp;
						cy += offsetYComp;
						dx -= offsetXComp;
						dy += offsetYComp;
					}

					if (state == null ||
						GlRenderState$state.mode != OpenGlMode.QUADS ||
						GlRenderState$state.textureId != 0 ||
						GlRenderState$state.r != red ||
						GlRenderState$state.g != green ||
						GlRenderState$state.b != blue ||
						GlRenderState$state.a != alpha) {
						if (state == null) {
							state = new GlRenderState(0, 0, 0, 0, 0, 0);
						} else {
							$_gl_end(gl);
						}

						GlRenderState$state.mode = OpenGlMode.QUADS;
						GlRenderState$state.textureId = 0;
						GlRenderState$state.r = red;
						GlRenderState$state.g = green;
						GlRenderState$state.b = blue;
						GlRenderState$state.a = alpha;

						$_gl_disable_texture_2d(gl);
						$_gl_color_4(gl, red, green, blue, alpha);
						$_gl_begin_quads(gl);
					}

					if (scaled) {
						$_gl_vertex_2(gl, $_unsafe_integer_division(ax * RW, VW), $_unsafe_integer_division(ay * RH, VH));
						$_gl_vertex_2(gl, $_unsafe_integer_division(bx * RW, VW), $_unsafe_integer_division(by * RH, VH));
						$_gl_vertex_2(gl, $_unsafe_integer_division(cx * RW, VW), $_unsafe_integer_division(cy * RH, VH));
						$_gl_vertex_2(gl, $_unsafe_integer_division(dx * RW, VW), $_unsafe_integer_division(dy * RH, VH));
					} else {
						$_gl_vertex_2(gl, ax, ay);
						$_gl_vertex_2(gl, bx, by);
						$_gl_vertex_2(gl, cx, cy);
						$_gl_vertex_2(gl, dx, dy);
					}
					break;

				case OpenGlAction.DRAW_IMAGE:
					image = $_array_get(GL_IMAGES, image_i);
					image_i += 1;

					left = $_array_get(GL_DATA, i | 1); // target X
					top = $_array_get(GL_DATA, i | 2); // target Y
					right = $_array_get(GL_DATA, i | 3) + left; // target width
					bottom = $_array_get(GL_DATA, i | 4) + top; // target height
					startX = $_array_get(GL_DATA, i | 5); // source X
					startY = $_array_get(GL_DATA, i | 6); // source Y
					width = $_array_get(GL_DATA, i | 7); // source width
					height = $_array_get(GL_DATA, i | 8); // source height
					alpha = $_array_get(GL_DATA, i | 9); // alpha

					if (right >= 0 && left < VW && bottom >= 0 && top < VH) {
						textureWidth = Image$image.textureRight - Image$image.textureLeft;
						textureHeight = Image$image.textureBottom - Image$image.textureTop;

						textureLeft = Image$image.textureLeft + $_unsafe_integer_division(textureWidth * startX, Image$image.width);
						textureTop = Image$image.textureTop + $_unsafe_integer_division(textureHeight * startY, Image$image.height);
						textureRight = textureLeft + $_unsafe_integer_division(textureWidth * width, Image$image.width);
						textureBottom = textureTop + $_unsafe_integer_division(textureHeight * height, Image$image.height);
						compositeImage = Image$image.compositeResource;
						if (!CompositeImage$compositeImage.loaded) {
							if (state != null)
							{
								state = null;
								$_gl_end(gl);
							}
							CompositeImage$compositeImage.glTextureId = $_gl_load_texture(gl, CompositeImage$compositeImage.nativeBitmap);
							CompositeImage$compositeImage.loaded = true;
						}
						textureId = CompositeImage$compositeImage.glTextureId;

						if (state == null ||
							GlRenderState$state.mode != OpenGlMode.QUADS ||
							GlRenderState$state.a != alpha ||
							GlRenderState$state.textureId != textureId) {
							if (state == null) {
								state = new GlRenderState(0, 0, 0, 0, 0, 0);
							} else {
								$_gl_end(gl);
							}

							GlRenderState$state.mode = OpenGlMode.QUADS;
							GlRenderState$state.textureId = textureId;
							GlRenderState$state.a = alpha;

							$_gl_enable_texture_2d(gl);
							$_gl_color_4(gl, 255, 255, 255, alpha);
							$_gl_bind_texture(gl, textureId);
							$_gl_begin_quads(gl);
						}

						if (scaled)
						{
							$_gl_tex_coord_2(gl, textureLeft, textureTop);
							$_gl_vertex_2(gl, $_unsafe_integer_division(left * RW, VW), $_unsafe_integer_division(top * RH, VH));
						
							$_gl_tex_coord_2(gl, textureRight, textureTop);
							$_gl_vertex_2(gl, $_unsafe_integer_division(right * RW, VW), $_unsafe_integer_division(top * RH, VH));

							$_gl_tex_coord_2(gl, textureRight, textureBottom);
							$_gl_vertex_2(gl, $_unsafe_integer_division(right * RW, VW), $_unsafe_integer_division(bottom * RH, VH));

							$_gl_tex_coord_2(gl, textureLeft, textureBottom);
							$_gl_vertex_2(gl, $_unsafe_integer_division(left * RW, VW), $_unsafe_integer_division(bottom * RH, VH));
						} else {
							$_gl_tex_coord_2(gl, textureLeft, textureTop);
							$_gl_vertex_2(gl, left, top);

							$_gl_tex_coord_2(gl, textureRight, textureTop);
							$_gl_vertex_2(gl, right, top);

							$_gl_tex_coord_2(gl, textureRight, textureBottom);
							$_gl_vertex_2(gl, right, bottom);

							$_gl_tex_coord_2(gl, textureLeft, textureBottom);
							$_gl_vertex_2(gl, left, bottom);
						}
					}
					break;

				default:
					return false;
			}
			i += 16;
		}

		if (state != null) {
			$_gl_end(gl);
		}
	}
	return true;
}

function @type('bool') glFillScreen(
	@type('int') red,
	@type('int') green,
	@type('int') blue) {
	glResetDrawBuffer();
	// TODO: get the real values
	glDrawRectangle(0, 0, 9999, 9999, red, green, blue, 255);
	return true;
}

function @type('bool') glDrawRectangle(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_RECTANGLE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawEllipse(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (width <= 2 || height <= 2)
		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_ELLIPSE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawTriangle(
	@type('int') x1,
	@type('int') y1,
	@type('int') x2,
	@type('int') y2,
	@type('int') x3,
	@type('int') y3,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_TRIANGLE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, x1);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, y1);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, x2);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, y2);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, x3);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, y3);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 10, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawLine(
	@type('int') startX,
	@type('int') startY,
	@type('int') endX,
	@type('int') endY,
	@type('int') lineWidth,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	// perfectly horizontal and vertical should use the rectangle logic.
	if (startX == endX || startY == endY)
	{
		@type('int') left = startX;
		@type('int') top = startY;
		@type('int') width = 0;
		@type('int') height = 0;

		if (startX == endX)
		{
			left = startX - $_unsafe_integer_division(lineWidth, 2);
			width = lineWidth;
			if (startY < endY) {
				height = endY - startY + 1;
			} else {
				height = startY - endY + 1;
				top = endY;
			}
		}
		else
		{
			top = startY - $_unsafe_integer_division(lineWidth, 2);
			height = lineWidth;
			if (startX < endX) {
				width = endX - startX + 1;
			} else {
				width = startX - endX + 1;
				left = endX;
			}
		}

		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);
	}
	
	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_LINE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, startX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, startY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, endX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, endY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, lineWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

// Draws an image on the screen at the coordinates.
function glDrawImageSimple(@type('Image') image, @type('int') x, @type('int') y) {
	// TODO: just do this inline or possibly create a separate render action.
	glDrawImageAdvanced(image, x, y, Image$image.width, Image$image.height, 0, 0, Image$image.width, Image$image.height, 255);
}

function glDrawImageWithAlpha(@type('Image') image, @type('int') x, @type('int') y, @type('int') alpha) {
	glDrawImageAdvanced(image, x, y, Image$image.width, Image$image.height, 0, 0, Image$image.width, Image$image.height, alpha);
}

// Draws a part of an image on a part of the screen. Stretching and cropping.
function glDrawImageAdvanced(
	@type('Image') image,
	@type('int') targetX,
	@type('int') targetY,
	@type('int') targetWidth,
	@type('int') targetHeight,
	@type('int') sourceX,
	@type('int') sourceY,
	@type('int') sourceWidth,
	@type('int') sourceHeight,
	@type('int') alpha) {
	
	if (alpha == 0) return null;
	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	if (GL_IMAGES_VIRTUAL_SIZE == GL_IMAGES_REAL_SIZE) glIncreaseImageListCapacity();
	
	/*
	@type('CompositeImage') compositeResource = Image$image.compositeResource;
	if (!CompositeImage$compositeResource.loaded) {
		CompositeImage$compositeResource.glTextureId = $_gl_load_texture(gl, CompositeImage$compositeResource.nativeBitmap);
		CompositeImage$compositeResource.loaded = true;
	}
	*/

	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_IMAGE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, targetX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, targetY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, targetWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, targetHeight);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, sourceX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, sourceY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, sourceWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, sourceHeight);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, alpha);
	GL_VIRTUAL_SIZE += 16;

	$_array_set(GL_IMAGES, GL_IMAGES_VIRTUAL_SIZE, image);
	GL_IMAGES_VIRTUAL_SIZE += 1;
}

// size must ALWAYS be divisible by 16
function glIncreaseDataCapacity() {
	@type('int') capacity = GL_REAL_SIZE * 2;
	if (capacity == 0) capacity = 16 * 50;
	@type('Array<int>') newGlData = $_new_array('int', capacity);
	for (@type('int') i = 0; i < GL_VIRTUAL_SIZE; i += 1) {
		$_array_set(newGlData, i, $_array_get(GL_DATA, i));
	}
	GL_DATA = newGlData;
	GL_REAL_SIZE = $_array_length(GL_DATA);
}

// no size restrictions.
function glIncreaseImageListCapacity() {
	@type('int') capacity = GL_IMAGES_REAL_SIZE * 2;
	if (capacity == 0) capacity = 50;
	@type('Array<Image>') newGlImages = $_new_array('Image', capacity);
	for (@type('int') i = 0; i < GL_IMAGES_VIRTUAL_SIZE; i += 1) {
		$_array_set(newGlImages, i, $_array_get(GL_IMAGES, i));
	}
	GL_IMAGES = newGlImages;
	GL_IMAGES_REAL_SIZE = $_array_length(GL_IMAGES);
}

function glResetDrawBuffer() {
	GL_VIRTUAL_SIZE = 0;
	GL_IMAGES_VIRTUAL_SIZE = 0;
}