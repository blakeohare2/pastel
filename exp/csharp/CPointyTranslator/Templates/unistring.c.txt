
int is_unicode_bom_present(char* text)
{
	return text[0] == (char) 239 && text[1] == (char) 187 && text[2] == (char) 191;
}

int SM_UniString_length(int* s)
{
	return s[-1];
}

int* unistring_from_binary_chars(char* binary_data, int length)
{
	int i = is_unicode_bom_present(binary_data) ? 3 : 0;
	unsigned char c;
	int* output = malloc(sizeof(int) * length);
	int utf8_length = 0;
	int valid_char = -1;
	int char_size = 0;

	char temp[2];
	temp[1] = '\0';
	
	while (i < length)
	{
		utf8_length++;
		c = binary_data[i];
		if (c < 128)
		{
			output[i] = c;
			temp[0] = c;
		}
		else
		{
			valid_char = -1;
			temp[0] = c;
			if ((c & 0xC0) == 0xC0) // 2 byte marker
			{
				if (i < length - 1 && 
					(binary_data[i + 1] & 0x80) == 0x80)
				{
					char_size = 2;
					valid_char =
						((binary_data[i] & 0x1F) << 6) |
						(binary_data[i + 1] & 0x3F);
				}
			}
			else if ((c & 0xE0) == 0xE0) // 3 byte marker
			{
				if (i < length - 2 &&
					(binary_data[i + 1] & 0x80) == 0x80 &&
					(binary_data[i + 2] & 0x80) == 0x80)
				{
					char_size = 3;
					valid_char =
						((binary_data[i] & 0x0F) << 12) |
						((binary_data[i + 1] & 0x3F) << 6) |
						(binary_data[i + 2] & 0x3F);
				}
			}
			else if ((c & 0xF0) == 0xF0) // 4 byte marker
			{
				if (i < length - 3 &&
					(binary_data[i + 1] & 0x80) == 0x80 &&
					(binary_data[i + 2] & 0x80) == 0x80 &&
					(binary_data[i + 3] & 0x80) == 0x80)
				{
					char_size = 4;
					valid_char =
						((binary_data[i] & 0x07) << 18) |
						((binary_data[i + 1] & 0x3F) << 12) |
						((binary_data[i + 2] & 0x3F) << 6) |
						(binary_data[i + 3] & 0x3F);
				}
			}
			else if ((c & 0xF8) == 0xF8) // 5 byte marker
			{
				if (i < length - 4 &&
					(binary_data[i + 1] & 0x80) == 0x80 &&
					(binary_data[i + 2] & 0x80) == 0x80 &&
					(binary_data[i + 3] & 0x80) == 0x80 &&
					(binary_data[i + 4] & 0x80) == 0x80)
				{
					char_size = 5;
					valid_char =
						((binary_data[i] & 0x03) << 24) |
						((binary_data[i + 1] & 0x3F) << 18) |
						((binary_data[i + 2] & 0x3F) << 12) |
						((binary_data[i + 3] & 0x3F) << 6) |
						(binary_data[i + 4] & 0x3F);
				}
			}
			else if ((c & 0xFC) == 0xFC) // 6 byte marker
			{
				if (i < length - 5 &&
					(binary_data[i + 1] & 0x80) == 0x80 &&
					(binary_data[i + 2] & 0x80) == 0x80 &&
					(binary_data[i + 3] & 0x80) == 0x80 &&
					(binary_data[i + 4] & 0x80) == 0x80 &&
					(binary_data[i + 5] & 0x80) == 0x80)
				{
					char_size = 6;
					valid_char =
						((binary_data[i] & 0x01) << 30) |
						((binary_data[i + 1] & 0x3F) << 24) |
						((binary_data[i + 2] & 0x3F) << 18) |
						((binary_data[i + 3] & 0x3F) << 12) |
						((binary_data[i + 4] & 0x3F) << 6) |
						(binary_data[i + 5] & 0x3F);
				}
			}
			
			if (valid_char == -1)
			{
				output[i] = c;
			}
			else
			{
				output[i] = valid_char;
				i += char_size - 1;
			}
		}
		++i;
	}
	
	int* copied_output = wrapped_malloc(sizeof(int) * (utf8_length + 1));
	copied_output[0] = utf8_length;
	memcpy(copied_output + 1, output, sizeof(int) * utf8_length);
	free(output);
	return copied_output + 1;
}

int* unistring_from_text_chars(char* raw_chars)
{
	return unistring_from_binary_chars(raw_chars, strlen(raw_chars));
}

int* SM_UniString_new_from_single_char(int c)
{
	int* output = wrapped_malloc(sizeof(int) * 2);
	output[0] = 1;
	output[1] = c;
	return output + 1;
}

int* get_string_constant(int id)
{
	static int** lookup = NULL;
	if (lookup == NULL)
	{
		lookup = generate_string_constants();
	}
	return lookup[id];
}

char* create_byte_string(int* unicode_string)
{
	int utf8_length = unicode_string[-1];
	char* output = (char*) malloc(sizeof(char) * (utf8_length * 6 + 1));
	int length = 0;
	int i = 0;
	int utf8char;
	while (i < utf8_length)
	{
		utf8char = unicode_string[i++];
		if (utf8char < 0x80)
		{
			output[length++] = (char) utf8char;
		}
		else if (utf8char < 0x800)
		{
			output[length++] = (char) (0xC0 | (utf8char >> 6));
			output[length++] = (char) (0x80 | (0x3F & utf8char));
		}
		else if (utf8char < 0x10000)
		{
			output[length++] = (char) (0xE0 | (utf8char >> 12));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 6)));
			output[length++] = (char) (0x80 | (0x3f & utf8char));
		}
		else if (utf8char < 0x200000)
		{
			output[length++] = (char) (0xF0 | (utf8char >> 18));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 12)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 6)));
			output[length++] = (char) (0x80 | (0x3f & utf8char));
		}
		else if (utf8char <  0x4000000)
		{
			output[length++] = (char) (0xF8 | (utf8char >> 24));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 18)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 12)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 6)));
			output[length++] = (char) (0x80 | (0x3f & utf8char));
		}
		else
		{
			output[length++] = (char) (0xFC | (utf8char >> 30));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 24)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 18)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 12)));
			output[length++] = (char) (0x80 | (0x3F & (utf8char >> 6)));
			output[length++] = (char) (0x80 | (0x3f & utf8char));
		}
	}
	
	char* copied_output = (char*) malloc(sizeof(char) * (length + 1));
	memcpy(copied_output, output, length);
	free(output);
	copied_output[length] = '\0';
	return copied_output;
}
