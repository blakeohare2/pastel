
// all codepaths push a value, so only subtract 1
valueStackSize -= 1;
value = $_array_get(valueStack, valueStackSize);
root = $_array_get(valueStack, valueStackSize - 1);

if (Value$root.type == Types.LIST) {
	if (Value$value.type != Types.INTEGER) {
		return killExecution(stack, pc, "List index must be an integer.");
	} else {
		i = $_cast('int', Value$value.internalValue);
		list1 = $_cast('List<Value>', Value$root.internalValue);
		if (i < 0) i += $_list_length(list1);
		if (i < 0 || i >= $_list_length(list1)) return killExecution(stack, pc, "List index is out of bounds");
		else {
			$_array_set(valueStack, valueStackSize - 1, $_list_get(list1, i));
		}
	}
} else if (Value$root.type == Types.DICTIONARY) {
	dictImpl = $_cast('DictImpl', Value$root.internalValue);
	keyType = Value$value.type;
	if (keyType != DictImpl$dictImpl.keyType) {
		if (DictImpl$dictImpl.size == 0) {
			return killExecution(stack, pc, "Key not found. Dictionary is empty.");
		}
		return killExecution(stack, pc, "Incorrect key type. This dictionary contains " + getTypeFromId(DictImpl$dictImpl.keyType) + " keys. Provided key is a " + getTypeFromId(keyType) + ".");
	} else {
		if (keyType == Types.INTEGER) {
			intKey = $_cast('int', Value$value.internalValue);
		} else if (keyType == Types.STRING) {
			stringKey = $_cast('string', Value$value.internalValue);
		} else if (keyType == Types.INSTANCE) {
			objInstance = $_cast('ObjectInstance', Value$value.internalValue);
			intKey = ObjectInstance$objInstance.objectId;
		} else {
			if (DictImpl$dictImpl.size == 0) {
				return killExecution(stack, pc, "Key not found. Dictionary is empty.");
			}
			return killExecution(stack, pc, "Key not found.");
		}

		if (keyType == Types.STRING) {
			dictStringValueLookup = $_cast('Dictionary<string, Value>', DictImpl$dictImpl.valueStringLookup);
			if ($_dictionary_contains(dictStringValueLookup, stringKey)) {
				output = $_dictionary_get_guaranteed(dictStringValueLookup, stringKey);
			} else {
				return killExecution(stack, pc, "Key not found: '" + stringKey + "'");
			}
		} else {
			dictIntValueLookup = $_cast('Dictionary<int, Value>', DictImpl$dictImpl.valueIntLookup);
			if ($_dictionary_contains(dictIntValueLookup, intKey)) {
				output = $_dictionary_get_guaranteed(dictIntValueLookup, intKey);
			} else {
				return killExecution(stack, pc, "Key not found.");
			}
		}

		if (output == null) return killExecution(stack, pc, "Key not found.");

		$_array_set(valueStack, valueStackSize - 1, output);
	}
} else if (Value$root.type == Types.STRING) {
	string1 = $_cast('string', Value$root.internalValue);
	if (Value$value.type != Types.INTEGER) {
		return killExecution(stack, pc, "indexes into strings must be integers.");
	}
	int1 = $_cast('int', Value$value.internalValue);
	if (int1 < 0) int1 += $_string_length(string1);
	if (int1 < 0 || int1 >= $_string_length(string1)) {
		return killExecution(stack, pc, "String index out of range.");
	}
	// Single char strings are common.
	$_array_set(valueStack, valueStackSize - 1, buildCommonString($_char_to_string($_string_char_at(string1, int1))));
} else {
	return killExecution(stack, pc, "Cannot index into this type: " + getTypeFromId(Value$root.type));
}
